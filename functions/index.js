const functions = require('firebase-functions');
const admin = require('firebase-admin');
const {google} = require('googleapis');
admin.initializeApp();


exports.previewFunction = functions.https.onRequest((request, response) => {
  const sheets = google.sheets('v4');
  const sheetIDfullURL = request.path.split("/")[6]
  const sheetID = request.query.id ? request.query.id : sheetIDfullURL  
  const sheetName = request.query.name ? request.query.name : 'Sheet1'
  const mode = request.query.mode ? request.query.mode : ''

  if (sheetID) {    
    const req = {
      spreadsheetId: sheetID,
      key: process.env.API_KEY,
      range: sheetName,      
      majorDimension: 'ROWS'
    }

    sheets.spreadsheets.values.get(req, (err, res) => {
      if (err) return console.log('The API returned an error: ' + err);
      const xmlItems = generateItems(res);
      const xml = `<?xml version="1.0" encoding="UTF-8"?>
                  <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
                  <channel>
                  <title>crssnt Feed</title>
                  <link>https://crssnt.com</link>
                  <description>RSS feed generated by crssnt</description>
                  <atom:link href="https://crssnt.com" rel="self"/>
                  <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>  
                  ${xmlItems}
                  </channel>
                  </rss>`;

    return response.status(200).contentType('text/xml; charset=utf8').send(xml);
    });
  }
  else {
    return response.status(400).send('Something went wrong, check the parameters and try again.');
  }

  const generateItems = (res) => {

    let xmlItemsAll = []      
    const values = res.data.values;

    for (const key in values) {
      let value = values[key]
      if(value.length > 0) {
        
        let url = value.find(s => s.startsWith('http'));
        let date = value.find(s => Date.parse(s));

        if(url){
          value.splice(value.indexOf(url), 1); 
        }
        
        if(date){
          value.splice(value.indexOf(date), 1); 
        }

        if(mode == 'title'){
          valueMode = value.join(' ');
        } else if (mode == 'B') {
          valueMode = value.slice(0);
        }

        let xmlItem = `<item>
          ${mode ? '<title><![CDATA['+valueMode+']]></title>' : '<title><![CDATA['+value[0]+']]></title>'}
          ${mode ? '<description></description>' : '<description><![CDATA['+value.slice(1)+']]></description>'}
          ${url !== undefined ? '<link>'+url+'</link>' : ''}
          ${url !== undefined ? '<guid>'+url+'</guid>' : ''}
          <pubDate>${date !== undefined ? new Date(date).toUTCString() : new Date().toUTCString()}</pubDate>
          </item>`
          xmlItemsAll = xmlItemsAll + xmlItem
      }
    }       
    return xmlItemsAll
  }
});